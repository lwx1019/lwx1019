<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络七层协议</title>
    <link href="/2022/07/16/yuque/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/07/16/yuque/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/6056879?fr=aladdin">https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/6056879?fr=aladdin</a><br>OSI 是一个开放性的通信系统互连参考模型，它是一个定义得非常好的协议规范。OSI 模型有 7 层结构，每层都可以有几个子层。 OSI 的 7 层从上到下分别是 7 应用层 6 表示层 5 会话层 4 传输层 3 网络层 2 数据链路层 1 物理层 ；其中高层（即 7、6、5、4 层）定义了应用程序的功能，下面 3 层（即 3、2、1 层）主要面向通过网络的端到端，点到点的数据流。</p><h2 id="各层功能"><a href="#各层功能" class="headerlink" title="各层功能"></a>各层功能</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>与其它计算机进行通讯的一个应用，它是对应应用程序的通信服务的。例如，一个没有通信功能的字处理程序就不能执行通信的<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81">代码</a>，从事字<a href="https://baike.baidu.com/item/%E5%A4%84%E7%90%86">处理</a>工作的程序员也不关心 OSI 的第 7 层。但是，如果添加了一个传输文件的选项，那么字<a href="https://baike.baidu.com/item/%E5%A4%84%E7%90%86%E5%99%A8">处理器</a>的程序就需要实现 OSI 的第 7 层。示例：<a href="https://baike.baidu.com/item/TELNET/810597">TELNET</a>，<a href="https://baike.baidu.com/item/HTTP/243074">HTTP</a>，<a href="https://baike.baidu.com/item/FTP/13839">FTP</a>，<a href="https://baike.baidu.com/item/NFS/812203">NFS</a>，<a href="https://baike.baidu.com/item/SMTP/175887">SMTP</a>等。</p><h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>这一层的主要功能是定义数据格式及加密。例如，FTP 允许你选择以二进制或 ASCII 格式传输。如果选择二进制，那么发送方和接收方不改变文件的内容。如果选择 ASCII 格式，发送方将把文本从发送方的<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86">字符集</a>转换成标准的 ASCII 后发送数据。在接收方将标准的 ASCII 转换成接收方计算机的字符集。示例：加密，ASCII 等。</p><h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>它定义了如何开始、控制和结束一个会话，包括对多个双向消息的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的，在某些情况下，如果表示层收到了所有的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE/5947370">数据</a>，则用数据代表表示层。示例：RPC，SQL 等。</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>这层的功能包括是选择差错恢复协议还是无差错恢复协议，及在同一<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA">主机</a>上对不同应用的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B5%81">数据流</a>的输入进行复用，还包括对收到的顺序不对的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85">数据包</a>的重新排序功能。示例：<a href="https://baike.baidu.com/item/TCP/33012">TCP</a>，<a href="https://baike.baidu.com/item/UDP/571511">UDP</a>，<a href="https://baike.baidu.com/item/SPX/610336">SPX</a>。</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>这层对端到端的包传输进行定义，它定义了能够标识所有结点的<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E5%9C%B0%E5%9D%80">逻辑地址</a>，还定义了<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1">路由</a>实现的方式和学习的方式。为了适应<a href="https://baike.baidu.com/item/%E6%9C%80%E5%A4%A7%E4%BC%A0%E8%BE%93%E5%8D%95%E5%85%83">最大传输单元</a>长度小于包长度的<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8">传输介质</a>，网络层还定义了如何将一个包分解成更小的包的分段方法。示例：IP，IPX 等。</p><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>它定义了在单个链路上如何传输数据。这些协议与被讨论的各种介质有关。示例：<a href="https://baike.baidu.com/item/ATM/8314845">ATM</a>，<a href="https://baike.baidu.com/item/FDDI/572177">FDDI</a>等。</p><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>OSI 的物理层规范是有关<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8">传输介质</a>的特性，这些规范通常也参考了其他组织制定的标准。连接头、帧、帧的使用、电流、编码及光调制等都属于各种物理层规范中的内容。物理层常用多个规范完成对所有细节的定义。示例：<a href="https://baike.baidu.com/item/Rj45/3401007">Rj45</a>，<a href="https://baike.baidu.com/item/802.3/960717">802.3</a>等。</p><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><h3 id="物理层-1"><a href="#物理层-1" class="headerlink" title="物理层"></a>物理层</h3><p>物理层是 OSI 的第一层，它虽然处于最底层，却是整个开放系统的基础。<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%B1%82">物理层</a>为设备之间的数据通信提供传输媒体及互连设备，为数据传输提供可靠的环境。<br><strong>1.1 媒体和互连设备</strong><br>物理层的媒体包括架空明线、平衡电缆、光纤、无线信道等。通信用的互连设备指 DTE 和 DCE 间的互连设备。DTE 即<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87">数据终端设备</a>，又称<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E8%AE%BE%E5%A4%87">物理设备</a>，如计算机、终端等都包括在内。而 DCE 则是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E8%AE%BE%E5%A4%87/10746849">数据通信设备</a>或电路连接设备，如<a href="https://baike.baidu.com/item/%E8%B0%83%E5%88%B6%E8%A7%A3%E8%B0%83%E5%99%A8">调制解调器</a>等。数据传输通常是经过 DTE——DCE，再经过 DCE——DTE 的路径。互连设备指将 DTE、DCE 连接起来的装置，如各种插头、插座。LAN 中的各种粗、细同轴电缆、T 型接、插头，接收器，发送器，<a href="https://baike.baidu.com/item/%E4%B8%AD%E7%BB%A7%E5%99%A8">中继器</a>等都属<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%B1%82">物理层</a>的媒体和连接器。<br><strong>1.2</strong>物理层的主要功能<br>1.2.1 为数据端设备提供传送数据的通路，<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF">数据通路</a>可以是一个<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AA%92%E4%BD%93">物理媒体</a>，也可以是多个物理媒体连接而成。一次完整的数据传输，包括激活物理连接，传送数据，终止物理连接.所谓激活，就是不管有多少物理媒体参与，都要在通信的两个<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87">数据终端设备</a>间连接起来，形成一条通路。<br>1.2.2 传输数据.物理层要形成适合数据传输需要的实体，为数据传送服务。一是要保证数据能在其上正确通过，二是要提供足够的<a href="https://baike.baidu.com/item/%E5%B8%A6%E5%AE%BD">带宽</a>(带宽是指每秒钟内能通过的比特(BIT)数)，以减少信道上的拥塞。传输数据的方式能满足点到点，一点到多点，串行或并行，半双工或全双工，同步或<a href="https://baike.baidu.com/item/%E5%BC%82%E6%AD%A5%E4%BC%A0%E8%BE%93">异步传输</a>的需要。<br><strong>1.3</strong><a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%B1%82">物理层</a>的一些重要标准<br>物理层的一些标准和协议早在 OSI&#x2F;TC97&#x2F;C16 分技术委员会成立之前就已制定并在应用了,OSI 也制定了一些标准并采用了一些已有的成果.下面将一些重要的标准列出,以便读者查阅.ISO2110:称为”数据通信—-25 芯 DTE&#x2F;DCE 接口连接器和插针分配”。它与 EIA(<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E7%94%B5%E5%AD%90%E5%B7%A5%E4%B8%9A%E5%8D%8F%E4%BC%9A/3931871">美国电子工业协会</a>)的”RS-232-C”基本兼容。ISO2593:称为”数据通信—-34 芯 DTE&#x2F;DCE—-接口连接器和插针分配”。ISO4092:称为”数据通信—-37 芯 DTE&#x2F;DEC—-接口连接器和插针分配”.与 EIA<a href="https://baike.baidu.com/item/RS-449">RS-449</a>兼容。CCITT V.24:称为”数据终端设备(DTE)和<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%94%B5%E8%B7%AF%E7%BB%88%E6%8E%A5%E8%AE%BE%E5%A4%87/16688221">数据电路终接设备</a>之间的接口电路定义表”.其功能与 EIARS-232-C 及 RS-449 兼容于 100 序列线上。</p><h3 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>数据链路可以粗略地理解为数据通道。<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%B1%82">物理层</a>要为<a href="https://baike.baidu.com/item/%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87">终端设备</a>间的数据通信提供传输媒体及其连接.媒体是长期的,连接是有生存期的.在连接生存期内,收发两端可以进行不等的一次或多次数据通信.每次通信都要经过建立通信联络和拆除通信联络两过程.这种建立起来的数据收发关系就叫作数据链路.而在<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AA%92%E4%BD%93">物理媒体</a>上传输的数据难免受到各种不可靠因素的影响而产生差错,为了弥补物理层上的不足,为上层提供无差错的数据传输,就要能对数据进行检错和纠错.数据链路的建立,拆除,对数据的检错,纠错是数据链路层的基本任务。<br><strong>2.1</strong><a href="https://baike.baidu.com/item/%E9%93%BE%E8%B7%AF%E5%B1%82">链路层</a>的主要功能<br>链路层是为网络层提供<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81">数据传送</a>服务的,这种服务要依靠本层具备的功能来实现。链路层应具备如下功能:<br>2.1.1 链路连接的建立，拆除，分离。<br>2.1.2<a href="https://baike.baidu.com/item/%E5%B8%A7%E5%AE%9A%E7%95%8C">帧定界</a>和<a href="https://baike.baidu.com/item/%E5%B8%A7%E5%90%8C%E6%AD%A5">帧同步</a>。链路层的数据传输单元是帧,协议不同,帧的长短和界面也有差别，但无论如何必须对帧进行定界。<br>2.1.3 顺序控制,指对帧的收发顺序的控制。<br>2.1.4 差错检测和恢复。还有链路标识,<a href="https://baike.baidu.com/item/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">流量控制</a>等等.差错检测多用方阵码<a href="https://baike.baidu.com/item/%E6%A0%A1%E9%AA%8C%E5%92%8C">校验和</a>循环码校验来检测信道上数据的误码,而帧丢失等用序号检测.各种错误的恢复则常靠反馈重发技术来完成。<br><strong>2.2</strong><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82">数据链路层</a>的主要协议<br>数据链路层协议是为发对等实体间保持一致而制定的,也为了顺利完成对网络层的服务。主要协议如下：<br>**2.2.1 **ISO1745–1975:”数据通信系统的基本型控制规程”.这是一种面向字符的标准,利用 10 个<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6">控制字符</a>完成链路的建立，拆除及数据交换.对帧的收发情况及差错恢复也是靠这些字符来完成.ISO1155, ISO1177, ISO2626, ISO2629 等标准的配合使用可形成多种链路控制和数据传输方式.<br>**2.2.2 **ISO3309–1984:称为”HDLC 帧结构”.ISO4335–1984:称为”HDLC 规程要素 “。ISO7809–1984:称为”HDLC 规程类型汇编”。这 3 个标准都是为面向比特的数据传输控制而制定的。有人习惯上把这 3 个标准组合称为高级链路控制规程.<br><strong>2.2.3</strong> ISO7776:称为”DTE 数据链路层规程”.与 CCITT X.25LAB”平衡型链路访问规程”相兼容。<br><strong>2.3</strong><a href="https://baike.baidu.com/item/%E9%93%BE%E8%B7%AF%E5%B1%82">链路层</a>产品<br>独立的链路产品中最常见的当属网卡,网桥也是链路产品。MODEM 的某些功能有人认为属于链路层,对此还有争议.<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82">数据链路层</a>将本质上不可靠的传输媒体变成可靠的传输通路提供给网络层。在<a href="https://baike.baidu.com/item/IEEE802.3">IEEE802.3</a>情况下，数据链路层分成了两个子层，一个是<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6">逻辑链路控制</a>，另一个是<a href="https://baike.baidu.com/item/%E5%AA%92%E4%BD%93%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6">媒体访问控制</a>。<br>AUI&#x3D;连接单元接口 PMA&#x3D;<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AA%92%E4%BD%93">物理媒体</a>连接<br>MAU&#x3D;媒体连接单元 PLS&#x3D;物理信令<br>MDI&#x3D;媒体相关接口</p><h3 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h3><p>网络层的产生也是<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%8F%91%E5%B1%95">网络发展</a>的结果.在<a href="https://baike.baidu.com/item/%E8%81%94%E6%9C%BA%E7%B3%BB%E7%BB%9F">联机系统</a>和线路交换的环境中，网络层的功能没有太大意义.当数据终端增多时。它们之间有中继设备相连.此时会出现一台终端要求不只是与唯一的一台而是能和多台终端通信的情况,这就是产生了把任意两台<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87">数据终端设备</a>的数据链接起来的问题,也就是路由或者叫寻径。另外,当一条物理信道建立之后,被一对用户使用,往往有许多空闲时间被浪费掉.人们自然会希望让多对用户共用一条链路，为解决这一问题就出现了逻辑信道技术和<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E7%94%B5%E8%B7%AF">虚拟电路</a>技术。<br><strong>3.1</strong>网络层主要功能<br>网络层为建立网络连接和为上层提供服务,应具备以下主要功能：<br>3.1.1<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9">路由选择</a>和中继.<br>3.1.2 激活,终止网络连接.<br>3.1.3 在一条数据链路上复用多条网络连接,多采取<a href="https://baike.baidu.com/item/%E5%88%86%E6%97%B6%E5%A4%8D%E7%94%A8">分时复用</a>技术 .<br>3.1.4 差错检测与恢复.<br>3.1.5 排序,<a href="https://baike.baidu.com/item/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">流量控制</a>.<br>3.1.6 服务选择.<br>3.1.7 网络管理.<br><strong>3.2</strong>网络层标准简介<br>网络层的一些主要标准如下：<br>3.2.1 ISO.DIS8208:称为”DTE 用的 X.25 分组级协议”<br>3.2.2 ISO.DIS8348:称为”CO 网络服务定义”(面向连接)<br>3.2.3 ISO.DIS8349:称为”CL 网络服务定义”(面向无连接)<br>3.2.4 ISO.DIS8473:称为”CL 网络协议”<br>3.2.5 ISO.DIS8348:称为”网络层寻址”<br>3.2.6 除上述标准外,还有许多标准。这些标准都只是解决网络层的部分功能,所以往往需要在网络层中同时使用几个标准才能完成整个网络层的功能.由于面对的网络不同,网络层将会采用不同的标准组合.<br>在具有开放特性的网络中的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87">数据终端设备</a>,都要配置网络层的功能.现在市场上销售的网络硬设备主要有<a href="https://baike.baidu.com/item/%E7%BD%91%E5%85%B3">网关</a>和<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>.</p><h3 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h3><p>传输层是两台计算机经过网络进行数据通信时,第一个端到端的层次，具有缓冲作用。当网络层服务质量不能满足要求时，它将服务加以提高，以满足高层的要求；当网络层服务质量较好时，它只用很少的工作。传输层还可进行复用，即在一个网络连接上创建多个逻辑连接。 传输层也称为<a href="https://baike.baidu.com/item/%E8%BF%90%E8%BE%93%E5%B1%82">运输层</a>.传输层只存在于端开放系统中,是介于低 3 层<a href="https://baike.baidu.com/item/%E9%80%9A%E4%BF%A1%E5%AD%90%E7%BD%91">通信子网</a>系统和高 3 层之间的一层,但是很重要的一层.因为它是源端到目的端对数据传送进行控制从低到高的最后一层.<br>有一个既存事实，即世界上各种通信子网在性能上存在着很大差异.例如电话交换网,<a href="https://baike.baidu.com/item/%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2%E7%BD%91/9013684">分组交换网</a>,公用数据交换网，局域网等通信子网都可互连,但它们提供的吞吐量,传输速率,数据延迟通信费用各不相同.对于会话层来说,却要求有一性能恒定的界面.<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%B1%82">传输层</a>就承担了这一功能.它采用分流&#x2F;合流，复用&#x2F;解复用技术来调节上述通信子网的差异,使会话层感受不到.<br>此外传输层还要具备差错恢复，<a href="https://baike.baidu.com/item/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">流量控制</a>等功能,以此对会话层屏蔽通信子网在这些方面的细节与差异.传输层面对的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1">数据对象</a>已不是<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80">网络地址</a>和<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA%E5%9C%B0%E5%9D%80">主机地址</a>,而是和会话层的界面端口.上述功能的最终目的是为会话提供可靠的,无误的数据传输.传输层的服务一般要经历传输连接建立阶段,<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81">数据传送</a>阶段,传输连接释放阶段 3 个阶段才算完成一个完整的服务过程.而在数据传送阶段又分为一般数据传送和加速数据传送两种。传输层服务分成 5 种类型.基本可以满足对传送质量,<a href="https://baike.baidu.com/item/%E4%BC%A0%E9%80%81%E9%80%9F%E5%BA%A6">传送速度</a>,传送费用的各种不同需要.传输层的协议标准有以下几种：<br>ISO8072:称为”面向连接的传输服务定义”<br>ISO8072:称为”面向连接的传输协议规范”</p><h3 id="会话层-1"><a href="#会话层-1" class="headerlink" title="会话层"></a>会话层</h3><p>会话层提供的服务可使应用建立和维持会话，并能使会话获得同步。会话层使用<a href="https://baike.baidu.com/item/%E6%A0%A1%E9%AA%8C%E7%82%B9">校验点</a>可使通信会话在通信失效时从校验点继续恢复通信。这种能力对于传送大的文件极为重要。会话层,<a href="https://baike.baidu.com/item/%E8%A1%A8%E7%A4%BA%E5%B1%82">表示层</a>,<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82">应用层</a>构成开放系统的高 3 层，面对应用进程提供<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%A4%84%E7%90%86">分布处理</a>，对话管理,信息表示,恢复最后的差错等.<br>会话层同样要担负应用进程服务要求，而<a href="https://baike.baidu.com/item/%E8%BF%90%E8%BE%93%E5%B1%82">运输层</a>不能完成的那部分工作,给运输层功能差距以弥补.主要的功能是对话管理，<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B5%81">数据流</a>同步和重新同步。要完成这些功能,需要由大量的服务单元功能组合,已经制定的功能单元已有几十种.现将会话层主要功能介绍如下.<br><strong>5.1 为会话实体间建立连接。</strong><br>为给两个对等会话服务用户建立一个会话连接,应该做如下几项工作：<br>5.1.1 将会话地址映射为运输地址<br>5.1.2 选择需要的运输服务质量参数(QOS)<br>5.1.3 对会话参数进行协商<br>5.1.3 识别各个会话连接<br>5.1.4 传送有限的透明用户数据<br><strong>5.2 数据传输阶段</strong><br>这个阶段是在两个会话用户之间实现有组织的,同步的数据传输.用户<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8D%95%E5%85%83">数据单元</a>为 SSDU,而<a href="https://baike.baidu.com/item/%E5%8D%8F%E8%AE%AE%E6%95%B0%E6%8D%AE%E5%8D%95%E5%85%83">协议数据单元</a>为 SPDU.会话用户之间的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81">数据传送</a>过程是将 SSDU 转变成 SPDU 进行的.<br><strong>5.3 连接释放</strong><br>连接释放是通过”有序释放”,”废弃”，”有限量透明用户数据传送”等功能单元来释放会话连接的.会话层标准为了使会话连接建立阶段能进行功能协商，也为了便于其它国际标准参考和引用,定义了 12 种功能单元.各个系统可根据自身情况和需要，以核心功能服务单元为基础,选配其他功能单元组成合理的会话服务子集.会话层的主要标准有”DIS8236:会话服务定义”和”DIS8237:会话协议规范”.</p><h3 id="表示层-1"><a href="#表示层-1" class="headerlink" title="表示层"></a>表示层</h3><p>表示层的作用之一是为异种机通信提供一种公共语言，以便能进行互操作。这种类型的服务之所以需要，是因为不同的<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">计算机体系结构</a>使用的数据表示法不同。例如，IBM<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA">主机</a>使用 EBCDIC 编码，而大部分 PC 机使用的是 ASCII 码。在这种情况下，便需要表示层来完成这种转换。<br>通过前面的介绍,我们可以看出,会话层以下 5 层完成了端到端的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81">数据传送</a>,并且是可靠,无差错的传送.但是数据传送只是手段而不是目的,最终是要实现对数据的使用.由于各种系统对数据的定义并不完全相同,最易明白的例子是键盘,其上的某些键的含义在许多系统中都有差异.这自然给利用其它系统的数据造成了障碍.<a href="https://baike.baidu.com/item/%E8%A1%A8%E7%A4%BA%E5%B1%82">表示层</a>和<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82">应用层</a>就担负了消除这种障碍的任务.<br>对于用户数据来说,可以从两个侧面来分析,一个是数据含义被称为语义,另一个是数据的表示形式,称做语法.像文字,图形,声音,文种,压缩,加密等都属于语法范畴.表示层设计了 3 类 15 种功能单位,其中上下文管理功能单位就是沟通用户间的数据编码规则,以便双方有一致的数据形式,能够互相认识.ISO 表示层为服务,协议,文本通信符制定了 DP8822,DP8823,DIS6937&#x2F;2 等一系列标准.</p><h3 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h3><p>应用层向应用程序提供服务，这些服务按其向应用程序提供的特性分成组，并称为服务元素。有些可为多种应用程序共同使用，有些则为较少的一类应用程序使用。应用层是开放系统的最高层,是直接为应用进程提供服务的。其作用是在实现多个系统应用进程相互通信的同时,完成一系列业务处理所需的服务.其服务元素分为两类:公共应用服务元素 CASE 和特定应用服务元素 SASE.CASE 提供最基本的服务,它成为应用层中任何用户和任何服务元素的用户，主要为应用<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">进程通信</a>,分布系统实现提供基本的控制机制.特定服务 SASE 则要满足一些特定服务,如文卷传送,访问管理,作业传送,银行事务,订单输入等.<br>这些将涉及到<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E7%BB%88%E7%AB%AF">虚拟终端</a>,作业传送与操作,文卷传送及访问管理,远程数据库访问,图形核心系统,<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E7%B3%BB%E7%BB%9F%E4%BA%92%E8%BF%9E">开放系统互连</a>管理等等.应用层的标准有 DP8649”公共应用服务元素”,DP8650”公共应用服务元素用协议”,文件传送,访问和管理服务及协议.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wifi4和wifi5和wifi6的区别</title>
    <link href="/2022/07/16/yuque/wifi4%E5%92%8Cwifi5%E5%92%8Cwifi6%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/07/16/yuque/wifi4%E5%92%8Cwifi5%E5%92%8Cwifi6%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>用技术术语来说，WiFi6 是 802.11ax。WiFi 5 是 802.11ac，WiFi 4 是 802.11n。<br>WiFi 6 的最高速率可达 9.6Gbps，也就是说理论传输速度达到了 1.2GB&#x2F;s 的传输速度。<br>WiFi 5 的最大高速率 为 3.5 Gbps，WiFi 4 为 600Mbps<br>WiFi4：802.11n 支持 20MHz 和 20MHZ&#x2F;40MHz 通道；<br>WiFi5：802.11ac 支持 80MHZ&#x2F;160MHZ 通道；<br>WiFi6：802.11ax 支持 160MHZ 通道；</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>同步文章并部署远端并推送仓库</title>
    <link href="/2022/07/16/yuque/%E5%90%8C%E6%AD%A5%E6%96%87%E7%AB%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%AB%AF%E5%B9%B6%E6%8E%A8%E9%80%81%E4%BB%93%E5%BA%93/"/>
    <url>/2022/07/16/yuque/%E5%90%8C%E6%AD%A5%E6%96%87%E7%AB%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E8%BF%9C%E7%AB%AF%E5%B9%B6%E6%8E%A8%E9%80%81%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">set YUQUE_TOKEN= &amp;&amp; yuque_hexo sync &amp;&amp; hexo clean &amp;&amp; hexo deploy &amp;&amp; git add . &amp;&amp; git commit -m &quot;edit&quot; &amp;&amp; git push origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HEXO 模板</title>
    <link href="/2022/07/16/yuque/HEXO%20%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/07/16/yuque/HEXO%20%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>？</category>
      
    </categories>
    
    
    <tags>
      
      <tag>？</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git proxy 配置</title>
    <link href="/2022/07/16/yuque/git%20proxy%20%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/16/yuque/git%20proxy%20%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/sunjinshengli/article/details/108862226">https://blog.csdn.net/sunjinshengli/article/details/108862226</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置http:</span><br>git config --global http.proxy http://127.0.0.1:10809<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置https:</span><br>git config --global https.proxy https://127.0.0.1:10809<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置socks:</span><br>git config --global http.proxy &#x27;socks5://127.0.0.1:10808&#x27;<br>git config --global https.proxy &#x27;socks5://127.0.0.1:10808&#x27;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 取消</span></span><br>git config --global --unset http.proxy<br>git config --global --unset https.proxy<br>————————————————<br>版权声明：本文为CSDN博主「sunpro518」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https://blog.csdn.net/sunjinshengli/article/details/108862226<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通过 yuque 和 github 搭建 博客</title>
    <link href="/2022/07/16/yuque/%E9%80%9A%E8%BF%87%20yuque%20%E5%92%8C%20github%20%E6%90%AD%E5%BB%BA%20%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/07/16/yuque/%E9%80%9A%E8%BF%87%20yuque%20%E5%92%8C%20github%20%E6%90%AD%E5%BB%BA%20%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://git-scm.com/">https://git-scm.com/</a> &gt; <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> &gt; <a href="https://github.com/">https://github.com/</a> &gt; <a href="https://www.yuque.com/">https://www.yuque.com/</a> &gt; <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> &gt; <a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a></p></blockquote><h1 id="1、安装必备软件-及-必备知识"><a href="#1、安装必备软件-及-必备知识" class="headerlink" title="1、安装必备软件 及 必备知识"></a>1、安装必备软件 及 必备知识</h1><h2 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h2><ul><li>git</li><li>nodejs</li></ul><p>默认下一步安装即可</p><h2 id="必备知识"><a href="#必备知识" class="headerlink" title="必备知识"></a>必备知识</h2><ul><li>ip</li><li>域名</li><li>git 版本控制</li><li>nodejs 包管理</li></ul><h1 id="2、搭建准备"><a href="#2、搭建准备" class="headerlink" title="2、搭建准备"></a>2、搭建准备</h1><ul><li>yuque 账号</li><li>github 账号</li></ul><p>markdown</p><h1 id="3、搭建"><a href="#3、搭建" class="headerlink" title="3、搭建"></a>3、搭建</h1><h2 id="1、通过-nodejs-安装-hexo-和-hexo-yuque"><a href="#1、通过-nodejs-安装-hexo-和-hexo-yuque" class="headerlink" title="1、通过 nodejs 安装 hexo 和 hexo-yuque"></a>1、通过 nodejs 安装 hexo 和 hexo-yuque</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hexo</span><br>npm i -g hexo-cli --registry=https://registry.npmmirror.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hexo-yuque</span><br>npm install --global yuque-hexo --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h2 id="2、创建-hexo-项目"><a href="#2、创建-hexo-项目" class="headerlink" title="2、创建 hexo 项目"></a>2、创建 hexo 项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexoblog<br>cd hexoblog<br>npm install<br></code></pre></td></tr></table></figure><h2 id="3、配置-hexo-yuque"><a href="#3、配置-hexo-yuque" class="headerlink" title="3、配置 hexo-yuque"></a>3、配置 hexo-yuque</h2><blockquote><p><a href="https://github.com/x-cold/yuque-hexo/blob/master/README.md">https://github.com/x-cold/yuque-hexo/blob/master/README.md</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-attr">&quot;yuqueConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;postPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source/_posts/yuque&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cachePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yuque.json&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mdNameFormat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;adapter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.yuque.com/api/v2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;login&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shenshouzhaiyikexingxing&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;repo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;isd1lt&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;onlyPublished&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;onlyPublic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lastGeneratePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lastGeneratePath.log&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;imgCdn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;imageBed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qiniu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;region&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;prefixKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="4、同步-yuque-文章到-hexo"><a href="#4、同步-yuque-文章到-hexo" class="headerlink" title="4、同步 yuque 文章到 hexo"></a>4、同步 yuque 文章到 hexo</h2><p><strong>注意： Token 千万不能泄露！！！</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">set YUQUE_TOKEN=输入token &amp;&amp; yuque-hexo sync<br><br>set YUQUE_TOKEN= &amp;&amp; yuque-hexo sync<br></code></pre></td></tr></table></figure><h2 id="5、上传-hexo-到-github"><a href="#5、上传-hexo-到-github" class="headerlink" title="5、上传 hexo 到 github"></a>5、上传 hexo 到 github</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化git库</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加所有文件让git管理</span><br>git add .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交上一步 add 暂存的文件</span><br>git commit -m &quot;first commit&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关联到远程分支/库</span><br>git remote add origin https://github.com/lwx1019/hexoblog.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">推上远程库</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add . &amp;&amp; git commit -m &quot;edit&quot; &amp;&amp; git push origin master<br></code></pre></td></tr></table></figure><h2 id="6、使用-hexo-deploy-功能-部署博客"><a href="#6、使用-hexo-deploy-功能-部署博客" class="headerlink" title="6、使用 hexo deploy 功能 部署博客"></a>6、使用 hexo deploy 功能 部署博客</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment">https://hexo.io/zh-cn/docs/one-command-deployment</a></p></blockquote><ol><li>新建一个 repository。如果你希望你的站点能通过域名 &lt;你的 GitHub 用户名&gt;.github.io 访问，你的 repository 应该直接命名为 &lt;你的 GitHub 用户名&gt;.github.io。</li><li>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下 public 目录将不会（也不应该）被推送到 repository 中，你应该检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。</li></ol><p>此外，如果您的 Github Pages 需要使用 CNAME 文件<strong>自定义域名</strong>，请将 CNAME 文件置于 source 目录下，只有这样 hexo deploy 才能将 CNAME 文件一并推送至部署分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repo: https://github.com/lwx1019/lwx1019.github.io.git<br>  branch: gh-pages<br>  message: edit<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 hexo-deployer-git , 需要在我们的hexo项目目录下执行</span><br>npm install hexo-deployer-git --save --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清理缓存 并 部署</span><br>hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><h2 id="7、使用-github-pages-功能-创建博客"><a href="#7、使用-github-pages-功能-创建博客" class="headerlink" title="7、使用 github pages 功能 创建博客"></a>7、使用 github pages 功能 创建博客</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28842740/1657953558027-22b51224-4fd4-41cf-a083-3d90ca1fb722.png#clientId=u446bfd7e-1117-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u20d1aac6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=914&originWidth=1834&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=116593&status=done&style=none&taskId=ue6c37ec9-dcfd-4982-9695-3f78a5baca7&title=&width=355" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28842740/1657954138220-b7651dd2-a00a-4d73-a04e-f3ca19c3ab0c.png#clientId=u766ef0e3-7243-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=185&id=ufc983c61&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1181&originWidth=2245&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=215337&status=done&style=none&taskId=uea9f11e5-7a1f-4af2-ac87-0219e0ff02f&title=&width=352" alt="image.png"></p><p>访问 即可<br><a href="https://lwx1019.github.io/">https://lwx1019.github.io/</a></p><h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">These are common Git commands used in various situations:<br><br>start a working area (see also: git help tutorial)<br>   clone     Clone a repository into a new directory<br>   init      Create an empty Git repository or reinitialize an existing one<br><br>work on the current change (see also: git help everyday)<br>   add       Add file contents to the index<br>   mv        Move or rename a file, a directory, or a symlink<br>   restore   Restore working tree files<br>   rm        Remove files from the working tree and from the index<br><br>examine the history and state (see also: git help revisions)<br>   bisect    Use binary search to find the commit that introduced a bug<br>   diff      Show changes between commits, commit and working tree, etc<br>   grep      Print lines matching a pattern<br>   log       Show commit logs<br>   show      Show various types of objects<br>   status    Show the working tree status<br><br>grow, mark and tweak your common history<br>   branch    List, create, or delete branches<br>   commit    Record changes to the repository<br>   merge     Join two or more development histories together<br>   rebase    Reapply commits on top of another base tip<br>   reset     Reset current HEAD to the specified state<br>   switch    Switch branches<br>   tag       Create, list, delete or verify a tag object signed with GPG<br><br>collaborate (see also: git help workflows)<br>   fetch     Download objects and refs from another repository<br>   pull      Fetch from and integrate with another repository or a local branch<br>   push      Update remote refs along with associated objects<br></code></pre></td></tr></table></figure><h1 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Commands:<br>  clean     Remove generated files and cache.<br>  config    Get or set configurations.<br>  deploy    Deploy your website.<br>  generate  Generate static files.<br>  help      Get help on a command.<br>  init      Create a new Hexo folder.<br>  list      List the information of the site<br>  migrate   Migrate your site from other system to Hexo.<br>  new       Create a new post.<br>  publish   Moves a draft post from _drafts to _posts folder.<br>  render    Render files with renderer plugins.<br>  server    Start the server.<br>  version   Display version information.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>nodejs</tag>
      
      <tag>github</tag>
      
      <tag>yuque</tag>
      
      <tag>hexo</tag>
      
      <tag>yuque-hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言教程</title>
    <link href="/2022/07/15/yuque/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    <url>/2022/07/15/yuque/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="第一个-c-程序"><a href="#第一个-c-程序" class="headerlink" title="第一个 c 程序"></a>第一个 c 程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">/* 我的第一个 C 程序 */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World! \n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实例解析：</strong></p><ul><li>所有的 C 语言程序都需要包含 <strong>main()</strong> 函数。 代码从 <strong>main()</strong> 函数开始执行。</li><li><strong>printf()</strong> 用于格式化输出到屏幕。<strong>printf()</strong> 函数在 <strong>“stdio.h”</strong> 头文件中声明。</li><li><strong>stdio.h</strong> 是一个头文件 (标准输入输出头文件) , <strong>#include</strong> 是一个预处理命令，用来引入头文件。</li><li><strong>return 0;</strong> 语句用于表示退出程序。</li></ul><h2 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C 程序结构"></a>C 程序结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-comment">/* 我的第一个 C 程序 */</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World! \n&quot;</span>);<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个程序包含以下部分：</p><ul><li>预处理器指令（如上述代码块中的#include&lt;stdio.h&gt;）</li><li>函数(如上述函数中的 main 函数)</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><h2 id="C-基本语法"><a href="#C-基本语法" class="headerlink" title="C 基本语法"></a>C 基本语法</h2><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>在 C 程序中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>C 语言有两种注释方式：以 <strong>&#x2F;&#x2F;</strong> 开始的单行注释，这种注释可以单独占一行；**&#x2F;* *&#x2F; **这种格式的注释可以单行或多行。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。<br>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是<strong>区分大小写</strong>的编程语言。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>声明自动变量</td></tr><tr><td>break</td><td>跳出当前循环</td></tr><tr><td>case</td><td>开关语句分支</td></tr><tr><td>char</td><td>声明字符型变量或函数返回值类型</td></tr><tr><td>const</td><td>定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td></tr><tr><td>continue</td><td>结束当前循环，开始下一轮循环</td></tr><tr><td>default</td><td>开关语句中的”其它”分支</td></tr><tr><td>do</td><td>循环语句的循环体</td></tr><tr><td>double</td><td>声明双精度浮点型变量或函数返回值类型</td></tr><tr><td>else</td><td>条件语句否定分支（与 if 连用）</td></tr><tr><td>enum</td><td>声明枚举类型</td></tr><tr><td>extern</td><td>声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td>float</td><td>声明浮点型变量或函数返回值类型</td></tr><tr><td>for</td><td>一种循环语句</td></tr><tr><td>goto</td><td>无条件跳转语句</td></tr><tr><td>if</td><td>条件语句</td></tr><tr><td>int</td><td>声明整型变量或函数</td></tr><tr><td>long</td><td>声明长整型变量或函数返回值类型</td></tr><tr><td>register</td><td>声明寄存器变量</td></tr><tr><td>return</td><td>子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td>short</td><td>声明短整型变量或函数</td></tr><tr><td>signed</td><td>声明有符号类型变量或函数</td></tr><tr><td>sizeof</td><td>计算数据类型或变量长度（即所占字节数）</td></tr><tr><td>static</td><td>声明静态变量</td></tr><tr><td>struct</td><td>声明结构体类型</td></tr><tr><td>switch</td><td>用于开关语句</td></tr><tr><td>typedef</td><td>用以给数据类型取别名</td></tr><tr><td>unsigned</td><td>声明无符号类型变量或函数</td></tr><tr><td>union</td><td>声明共用体类型</td></tr><tr><td>void</td><td>声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td>volatile</td><td>说明变量在程序执行中可被隐含地改变</td></tr><tr><td>while</td><td>循环语句的循环条件</td></tr></tbody></table><h2 id="C-数据基本类型"><a href="#C-数据基本类型" class="headerlink" title="C 数据基本类型"></a>C 数据基本类型</h2><p>它们是算术类型，包括两种类型：整数类型和浮点类型。</p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr></tbody></table><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>1、数据类型转换：C 语言中如果一个表达式中含有不同类型的常量和变量，在计算时，会将它们自动转换为同一种类型；在 C 语言中也可以对数据类型进行强制转换；<br>2、自动转换规则：</p><ul><li>浮点数赋给整型，该浮点数小数被舍去；</li><li>整数赋给浮点型，数值不变，但是被存储到相应的浮点型变量中；</li></ul><p>3、强制类型转换形式: <strong>(类型说明符)(表达式)</strong></p><h2 id="C-变量"><a href="#C-变量" class="headerlink" title="C 变量"></a>C 变量</h2><p>变量的名称可以由字母、数字和下划线字符组成。它必须以字母（大写或小写）或下划线开头。</p><h2 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C 中的变量定义"></a>C 中的变量定义</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一个文档</title>
    <link href="/2022/05/14/yuque/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%87%E6%A1%A3/"/>
    <url>/2022/05/14/yuque/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">/* 我的第一个 C 程序 */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World! \n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
