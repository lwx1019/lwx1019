<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>通过 yuque 和 github 搭建 博客</title>
    <link href="/2022/07/16/yuque/%E9%80%9A%E8%BF%87%20yuque%20%E5%92%8C%20github%20%E6%90%AD%E5%BB%BA%20%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/07/16/yuque/%E9%80%9A%E8%BF%87%20yuque%20%E5%92%8C%20github%20%E6%90%AD%E5%BB%BA%20%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://git-scm.com/">https://git-scm.com/</a> &gt; <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> &gt; <a href="https://github.com/">https://github.com/</a> &gt; <a href="https://www.yuque.com/">https://www.yuque.com/</a> &gt; <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> &gt; <a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a></p></blockquote><h1 id="1、安装必备软件-及-必备知识"><a href="#1、安装必备软件-及-必备知识" class="headerlink" title="1、安装必备软件 及 必备知识"></a>1、安装必备软件 及 必备知识</h1><h2 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h2><ul><li>git</li><li>nodejs</li></ul><p>默认下一步安装即可</p><h2 id="必备知识"><a href="#必备知识" class="headerlink" title="必备知识"></a>必备知识</h2><ul><li>ip</li><li>域名</li><li>git 版本控制</li><li>nodejs 包管理</li></ul><h1 id="2、搭建准备"><a href="#2、搭建准备" class="headerlink" title="2、搭建准备"></a>2、搭建准备</h1><ul><li>yuque 账号</li><li>github 账号</li></ul><p>markdown</p><h1 id="3、搭建"><a href="#3、搭建" class="headerlink" title="3、搭建"></a>3、搭建</h1><h2 id="1、通过-nodejs-安装-hexo-和-hexo-yuque"><a href="#1、通过-nodejs-安装-hexo-和-hexo-yuque" class="headerlink" title="1、通过 nodejs 安装 hexo 和 hexo-yuque"></a>1、通过 nodejs 安装 hexo 和 hexo-yuque</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hexo</span><br>npm i -g hexo-cli --registry=https://registry.npmmirror.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hexo-yuque</span><br>npm install --global yuque-hexo --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h2 id="2、创建-hexo-项目"><a href="#2、创建-hexo-项目" class="headerlink" title="2、创建 hexo 项目"></a>2、创建 hexo 项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexoblog<br>cd hexoblog<br>npm install<br></code></pre></td></tr></table></figure><h2 id="3、配置-hexo-yuque"><a href="#3、配置-hexo-yuque" class="headerlink" title="3、配置 hexo-yuque"></a>3、配置 hexo-yuque</h2><blockquote><p><a href="https://github.com/x-cold/yuque-hexo/blob/master/README.md">https://github.com/x-cold/yuque-hexo/blob/master/README.md</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-attr">&quot;yuqueConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;postPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source/_posts/yuque&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cachePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yuque.json&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mdNameFormat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;adapter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.yuque.com/api/v2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;login&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shenshouzhaiyikexingxing&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;repo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;isd1lt&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;onlyPublished&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;onlyPublic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lastGeneratePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lastGeneratePath.log&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;imgCdn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;imageBed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qiniu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;region&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;prefixKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="4、同步-yuque-文章到-hexo"><a href="#4、同步-yuque-文章到-hexo" class="headerlink" title="4、同步 yuque 文章到 hexo"></a>4、同步 yuque 文章到 hexo</h2><p><strong>注意： Token 千万不能泄露！！！</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">set YUQUE_TOKEN=输入token &amp;&amp; yuque-hexo sync<br><br>set YUQUE_TOKEN= &amp;&amp; yuque-hexo sync<br></code></pre></td></tr></table></figure><h2 id="5、上传-hexo-到-github"><a href="#5、上传-hexo-到-github" class="headerlink" title="5、上传 hexo 到 github"></a>5、上传 hexo 到 github</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化git库</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加所有文件让git管理</span><br>git add .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交上一步 add 暂存的文件</span><br>git commit -m &quot;first commit&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关联到远程分支/库</span><br>git remote add origin https://github.com/lwx1019/hexoblog.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">推上远程库</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add . &amp;&amp; git commit -m &quot;edit&quot; &amp;&amp; git push origin master<br></code></pre></td></tr></table></figure><h2 id="6、使用-hexo-deploy-功能-部署博客"><a href="#6、使用-hexo-deploy-功能-部署博客" class="headerlink" title="6、使用 hexo deploy 功能 部署博客"></a>6、使用 hexo deploy 功能 部署博客</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment">https://hexo.io/zh-cn/docs/one-command-deployment</a></p></blockquote><ol><li>新建一个 repository。如果你希望你的站点能通过域名 &lt;你的 GitHub 用户名&gt;.github.io 访问，你的 repository 应该直接命名为 &lt;你的 GitHub 用户名&gt;.github.io。</li><li>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下 public 目录将不会（也不应该）被推送到 repository 中，你应该检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。</li></ol><p>此外，如果您的 Github Pages 需要使用 CNAME 文件<strong>自定义域名</strong>，请将 CNAME 文件置于 source 目录下，只有这样 hexo deploy 才能将 CNAME 文件一并推送至部署分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Deployment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span><br>deploy:<br>  type: git<br>  repo: https://github.com/lwx1019/lwx1019.github.io.git<br>  branch: gh-pages<br>  message: edit<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 hexo-deployer-git , 需要在我们的hexo项目目录下执行</span><br>npm install hexo-deployer-git --save --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清理缓存 并 部署</span><br>hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><h2 id="7、使用-github-pages-功能-创建博客"><a href="#7、使用-github-pages-功能-创建博客" class="headerlink" title="7、使用 github pages 功能 创建博客"></a>7、使用 github pages 功能 创建博客</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28842740/1657953558027-22b51224-4fd4-41cf-a083-3d90ca1fb722.png#clientId=u446bfd7e-1117-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u20d1aac6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=914&originWidth=1834&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=116593&status=done&style=none&taskId=ue6c37ec9-dcfd-4982-9695-3f78a5baca7&title=&width=355" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28842740/1657954138220-b7651dd2-a00a-4d73-a04e-f3ca19c3ab0c.png#clientId=u766ef0e3-7243-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=185&id=ufc983c61&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1181&originWidth=2245&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=215337&status=done&style=none&taskId=uea9f11e5-7a1f-4af2-ac87-0219e0ff02f&title=&width=352" alt="image.png"></p><p>访问 即可<br><a href="https://lwx1019.github.io/">https://lwx1019.github.io/</a></p><h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">These are common Git commands used in various situations:<br><br>start a working area (see also: git help tutorial)<br>   clone     Clone a repository into a new directory<br>   init      Create an empty Git repository or reinitialize an existing one<br><br>work on the current change (see also: git help everyday)<br>   add       Add file contents to the index<br>   mv        Move or rename a file, a directory, or a symlink<br>   restore   Restore working tree files<br>   rm        Remove files from the working tree and from the index<br><br>examine the history and state (see also: git help revisions)<br>   bisect    Use binary search to find the commit that introduced a bug<br>   diff      Show changes between commits, commit and working tree, etc<br>   grep      Print lines matching a pattern<br>   log       Show commit logs<br>   show      Show various types of objects<br>   status    Show the working tree status<br><br>grow, mark and tweak your common history<br>   branch    List, create, or delete branches<br>   commit    Record changes to the repository<br>   merge     Join two or more development histories together<br>   rebase    Reapply commits on top of another base tip<br>   reset     Reset current HEAD to the specified state<br>   switch    Switch branches<br>   tag       Create, list, delete or verify a tag object signed with GPG<br><br>collaborate (see also: git help workflows)<br>   fetch     Download objects and refs from another repository<br>   pull      Fetch from and integrate with another repository or a local branch<br>   push      Update remote refs along with associated objects<br></code></pre></td></tr></table></figure><h1 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Commands:<br>  clean     Remove generated files and cache.<br>  config    Get or set configurations.<br>  deploy    Deploy your website.<br>  generate  Generate static files.<br>  help      Get help on a command.<br>  init      Create a new Hexo folder.<br>  list      List the information of the site<br>  migrate   Migrate your site from other system to Hexo.<br>  new       Create a new post.<br>  publish   Moves a draft post from _drafts to _posts folder.<br>  render    Render files with renderer plugins.<br>  server    Start the server.<br>  version   Display version information.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言教程</title>
    <link href="/2022/07/15/yuque/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    <url>/2022/07/15/yuque/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="第一个-c-程序"><a href="#第一个-c-程序" class="headerlink" title="第一个 c 程序"></a>第一个 c 程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">/* 我的第一个 C 程序 */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World! \n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实例解析：</strong></p><ul><li>所有的 C 语言程序都需要包含 <strong>main()</strong> 函数。 代码从 <strong>main()</strong> 函数开始执行。</li><li><strong>printf()</strong> 用于格式化输出到屏幕。<strong>printf()</strong> 函数在 <strong>“stdio.h”</strong> 头文件中声明。</li><li><strong>stdio.h</strong> 是一个头文件 (标准输入输出头文件) , <strong>#include</strong> 是一个预处理命令，用来引入头文件。</li><li><strong>return 0;</strong> 语句用于表示退出程序。</li></ul><h2 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C 程序结构"></a>C 程序结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-comment">/* 我的第一个 C 程序 */</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World! \n&quot;</span>);<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个程序包含以下部分：</p><ul><li>预处理器指令（如上述代码块中的#include&lt;stdio.h&gt;）</li><li>函数(如上述函数中的 main 函数)</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><h2 id="C-基本语法"><a href="#C-基本语法" class="headerlink" title="C 基本语法"></a>C 基本语法</h2><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>在 C 程序中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>C 语言有两种注释方式：以 <strong>&#x2F;&#x2F;</strong> 开始的单行注释，这种注释可以单独占一行；**&#x2F;* *&#x2F; **这种格式的注释可以单行或多行。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。<br>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是<strong>区分大小写</strong>的编程语言。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>声明自动变量</td></tr><tr><td>break</td><td>跳出当前循环</td></tr><tr><td>case</td><td>开关语句分支</td></tr><tr><td>char</td><td>声明字符型变量或函数返回值类型</td></tr><tr><td>const</td><td>定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td></tr><tr><td>continue</td><td>结束当前循环，开始下一轮循环</td></tr><tr><td>default</td><td>开关语句中的”其它”分支</td></tr><tr><td>do</td><td>循环语句的循环体</td></tr><tr><td>double</td><td>声明双精度浮点型变量或函数返回值类型</td></tr><tr><td>else</td><td>条件语句否定分支（与 if 连用）</td></tr><tr><td>enum</td><td>声明枚举类型</td></tr><tr><td>extern</td><td>声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td>float</td><td>声明浮点型变量或函数返回值类型</td></tr><tr><td>for</td><td>一种循环语句</td></tr><tr><td>goto</td><td>无条件跳转语句</td></tr><tr><td>if</td><td>条件语句</td></tr><tr><td>int</td><td>声明整型变量或函数</td></tr><tr><td>long</td><td>声明长整型变量或函数返回值类型</td></tr><tr><td>register</td><td>声明寄存器变量</td></tr><tr><td>return</td><td>子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td>short</td><td>声明短整型变量或函数</td></tr><tr><td>signed</td><td>声明有符号类型变量或函数</td></tr><tr><td>sizeof</td><td>计算数据类型或变量长度（即所占字节数）</td></tr><tr><td>static</td><td>声明静态变量</td></tr><tr><td>struct</td><td>声明结构体类型</td></tr><tr><td>switch</td><td>用于开关语句</td></tr><tr><td>typedef</td><td>用以给数据类型取别名</td></tr><tr><td>unsigned</td><td>声明无符号类型变量或函数</td></tr><tr><td>union</td><td>声明共用体类型</td></tr><tr><td>void</td><td>声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td>volatile</td><td>说明变量在程序执行中可被隐含地改变</td></tr><tr><td>while</td><td>循环语句的循环条件</td></tr></tbody></table><h2 id="C-数据基本类型"><a href="#C-数据基本类型" class="headerlink" title="C 数据基本类型"></a>C 数据基本类型</h2><p>它们是算术类型，包括两种类型：整数类型和浮点类型。</p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr></tbody></table><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>1、数据类型转换：C 语言中如果一个表达式中含有不同类型的常量和变量，在计算时，会将它们自动转换为同一种类型；在 C 语言中也可以对数据类型进行强制转换；<br>2、自动转换规则：</p><ul><li>浮点数赋给整型，该浮点数小数被舍去；</li><li>整数赋给浮点型，数值不变，但是被存储到相应的浮点型变量中；</li></ul><p>3、强制类型转换形式: <strong>(类型说明符)(表达式)</strong></p><h2 id="C-变量"><a href="#C-变量" class="headerlink" title="C 变量"></a>C 变量</h2><p>变量的名称可以由字母、数字和下划线字符组成。它必须以字母（大写或小写）或下划线开头。</p><h2 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C 中的变量定义"></a>C 中的变量定义</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一个文档</title>
    <link href="/2022/05/14/yuque/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%87%E6%A1%A3/"/>
    <url>/2022/05/14/yuque/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">/* 我的第一个 C 程序 */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World! \n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
